---
## Front matter
lang: ru-RU
title: Элементы криптографии. Однократное гаммирование
subtitle:
author:
  - Соболев М. С.
institute:
  - Российский университет дружбы народов, Москва, Россия
date: 15 октября 2022

## i18n babel
babel-lang: russian
babel-otherlangs: english

## Formatting pdf
toc: false
toc-title: Содержание
slide_level: 2
aspectratio: 169
section-titles: true
theme: metropolis
header-includes:
 - \metroset{progressbar=frametitle,sectionpage=progressbar,numbering=fraction}
 - '\makeatletter'
 - '\beamer@ignorenonframefalse'
 - '\makeatother'

## Fonts
mainfont: PT Serif
romanfont: PT Serif
sansfont: PT Sans
monofont: PT Mono
mainfontoptions: Ligatures=TeX
romanfontoptions: Ligatures=TeX
sansfontoptions: Ligatures=TeX,Scale=MatchLowercase
monofontoptions: Scale=MatchLowercase

---

# Информация

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="70%"}

  * Соболев Максим Сергеевич
  * Студент 4 курса, 1032192035
  * Направление: Бизнес-информатика
  * Российский университет дружбы народов
  * [sobolek322lorek@gmail.com](sobolek322lorek@gmail.com)

:::
::: {.column width="30%"}

:::
::::::::::::::

# Вводная часть

## Актуальность

- Изучим режим однократного гаммирования

## Объект и предмет исследования

- Изучение режима однократного гаммирования
 
## Цель

- Получение практических навыков работы с однократным гаммированием

## Материал

- Отчет по ранее выполненной работе

# Выполнение лабораторной работы


##  1

Код

```csharp
using System.Text;

Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
Console.OutputEncoding = Encoding.GetEncoding(1251);
Console.InputEncoding = Encoding.GetEncoding(1251);

Console.WriteLine("Введите 1 для шифрования текста");
Console.WriteLine("Введите 2 для определения ключа");
var mode = Console.ReadLine();


Console.WriteLine(
$"В каком формате будет представлен {(mode == "1" ? "ключ шифрования" : "шифротекст")}? Нажмите 1 если в шеснадцатеричном, нажмите 2 если открытым текстом");
var keyForm = Console.ReadLine();

Console.WriteLine($"Введите {(mode == "1" ? "ключ шифрования" : "шифротекст")}");
var cypherText = ReadUserInput(keyForm);


Console.WriteLine(
"В каком формате будет представлено сообщение? Нажмите 1 если в шеснадцатеричном, нажмите 2 если открытым текстом");
var textForm = Console.ReadLine();

Console.WriteLine("Введите сообщение");
var plainText = ReadUserInput(textForm);


Console.WriteLine(DeriveKey(cypherText, plainText));

string DeriveKey(string cypherText, string plainText)
{
var result = string.Empty;
for (var i = 0; i < cypherText.Length; i += 2)
{
var cypherByte = Convert.ToInt32(cypherText.Substring(i, 2), 16);
var plainByte = Convert.ToInt32(plainText.Substring(i, 2), 16);

        result += (cypherByte ^ plainByte).ToString("X");
    }
        
    return result;
}

string ReadUserInput(string? s)
{
return s == "1"
? Console.ReadLine() ?? throw new InvalidOperationException()
: string.Concat(Encoding.GetEncoding(1251)
.GetBytes(Console.ReadLine() ?? throw new InvalidOperationException()).Select(b => b.ToString("X2")));
}

```

##  2

Шифрование


![1](image/1.png){ #fig:001 width=70% }

##  3

Дешифрование

![2](image/2.png){ #fig:002 width=70% }

# Выводы

В итоге мы научились работать и применять режим однократного гаммирования
:::

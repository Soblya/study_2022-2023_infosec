---
## Front matter
title: "Отчёт по лабораторной работе 1"
subtitle: ""
author: "Соболев Максим Сергеевич"

## Generic otions
lang: ru-RU
toc-title: "Содержание"

## Bibliography
bibliography: bib/cite.bib
csl: pandoc/csl/gost-r-7-0-5-2008-numeric.csl

## Pdf output format
toc: true # Table of contents
toc-depth: 2
lof: true # List of figures
lot: false # List of tables
fontsize: 12pt
linestretch: 1.5
papersize: a4
documentclass: scrreprt
## I18n polyglossia
polyglossia-lang:
  name: russian
  options:
	- spelling=modern
	- babelshorthands=true
polyglossia-otherlangs:
  name: english
## I18n babel
babel-lang: russian
babel-otherlangs: english
## Fonts
mainfont: PT Serif
romanfont: PT Serif
sansfont: PT Sans
monofont: PT Mono
mainfontoptions: Ligatures=TeX
romanfontoptions: Ligatures=TeX
sansfontoptions: Ligatures=TeX,Scale=MatchLowercase
monofontoptions: Scale=MatchLowercase
## Biblatex
biblatex: true
biblio-style: "gost-numeric"
biblatexoptions:
  - parentracker=true
  - backend=biber
  - hyperref=auto
  - language=auto
  - autolang=other*
  - citestyle=gost-numeric
## Pandoc-crossref LaTeX customization
figureTitle: "Рис."
tableTitle: "Таблица"
listingTitle: "Листинг"
lofTitle: "Список иллюстраций"
lotTitle: "Список таблиц"
lolTitle: "Листинги"
## Misc options
indent: true
header-includes:
  - \usepackage{indentfirst}
  - \usepackage{float} # keep figures where there are in the text
  - \floatplacement{figure}{H} # keep figures where there are in the text
---

# Цель работы
## Установка и конфигурация операционной системы на виртуальную машину

Целью данной работы является приобретение практических навыков установки операционной системы на виртуальную машину, настройки минимально необходимых для дальнейшей работы сервисов.

## Управление версиями
Изучить идеологию и применение средств контроля версий.

Освоить умения по работе с git.

## Markdown
Научиться оформлять отчёты с помощью легковесного языка разметки Markdown.

# Задание

- Установить ОС Linux, с использованием виртуальной машины.
- Освоить умения по работе с git. 
- Оформить отчет в Markdown.

# Теоретическое введение
- Виртуальная машина  — программная система, эмулирующая аппаратное обеспечение некоторой платформы и исполняющая программы для guest-платформы на host-платформе или виртуализирующая некоторую платформу и создающая на ней среды, изолирующие друг от друга программы и даже операционные системы; 
- Linux в части случаев — семейство Unix-подобных операционных систем на базе ядра Linux, включающих тот или иной набор утилит и программ проекта GNU, и, возможно, другие компоненты. Как и ядро Linux, системы на его основе, как правило, создаются и распространяются в соответствии с моделью разработки свободного и открытого программного обеспечения. Linux-системы распространяются в основном бесплатно в виде различных дистрибутивов — в форме, готовой для установки и удобной для сопровождения и обновлений, — и имеющих свой набор системных и прикладных компонентов, как свободных, так и проприетарных. 
- git — распределённая система управления версиями. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux, первая версия выпущена 7 апреля 2005 года.
- GitHub — крупнейший веб-сервис для хостинга IT-проектов и их совместной разработки с использованием git.
- Markdown — облегчённый язык разметки, созданный с целью обозначения форматирования в простом тексте, с максимальным сохранением его читаемости человеком, и пригодный для машинного преобразования в языки для продвинутых публикаций (HTML, Rich Text и других). 


# Выполнение лабораторной работы (часть 1)

## Создание виртуальной машины

В этом окне необходимо указать название, директорию установки и тип гостевой ОС (Windows, Linux или другая). Так же предлагается выбрать объем доступной оперативной памяти и способ создания виртуального жесткого диска.

![Создание виртуальной машины](image/0.1.png){ #fig:001 width=70% }

### Настройка виртуального жесткого диска

Здесь указываем объем виртуального жесткого диска, место его хранения. 

![Настройка виртуального ЖД](image/0.5.png){ #fig:002 width=70% }

### Настройка виртуального процессора

Добавляем виртуальные ядра, что бы ВМ шевелилась быстрее.

![Настройка виртуального ЦП](image/0.6.png){ #fig:003 width=70% }

### Запуск виртуальной машины

Нажимаем кнопку "Start", виртуальная машина запускается.  

![Кнопка запуска ВМ](image/0.7.png){ #fig:004 width=70% }

## Начало установки
Сразу после загрузки программы установки ОС, нас встречает экран приветствия и предложение выбрать язык интерфейса.


![Название рисунка](image/0.3.png){ #fig:005 width=70% }

## Окно с общими сведениями о параметрах будущей установки
Здесь перед установкой мы можем увидеть общие сведения о параметрах будущей установки и настроить их.

![Сведения об установке](image/1.png){ #fig:006 width=70% }

Настраиваем место установки, время, параметры раскладки клавиатуры и т.д.

Данные пользователя в соответствии с соглашением:

![Окно создания пользователя](image/0.02.png){ #fig:007 width=70% }

## Наблюдаем за процессом установки
Откинувшись на спинку кресла внимательно наблюдаем за синей полоской прогресса установки и пьем чай.

![Синяя полоса прогресса установки](image/0.8.png){ #fig:008 width=70% }

## После окончания процесса установки

После окончания процесса установки виртуальная машина автоматически перезагрузится. Нас встречает окно выбора пользователя. 

![Окончание процесса установки](image/0.9.png){ #fig:009 width=70% }

## Вывод ``dmesg | less``

Начинаем выполнять задания.

![dmesg | less](image/2.png){ #fig:010 width=70% }

## Версия ядра Linux

![Версия ядра Linux](image/3.png){ #fig:011 width=70% }

## Сведения о частоте и модели процессора

![Частота процессора](image/4.png){ #fig:012 width=70% }

![Модель процессора](image/5.png){ #fig:013 width=70% }

## Сведения о доступной ОЗУ

![Доступная ОЗУ](image/6.png){ #fig:014 width=70% }

## Сведения об используемом гипервизоре

![Используемый гипервизор](image/7.png){ #fig:015 width=70% }

## Сведения о типе файловой системы корневого раздела

Раздел ``/`` форматирован как XFS. XFS — высокопроизводительная  журналируемая ФС, используемая в Rocky Linux по-умолчанию

![Файловая система корневого раздела](image/8.png){ #fig:017 width=70% }

## Последовательность монтирования файловых систем 

![Последовательность монтирования ФС](image/9.png){ #fig:018 width=70% }


# Контрольные вопросы (часть 1)

## Какую информацию содержит учётная запись пользователя?
Учётная запись содержит имя учётной записи и список групп, в которые она включена; 

"Учётки" пользователей могут иметь путь к shell, hash пароля и путь к домашней папке.

## Укажите команды терминала и приведите примеры:

### Получение справки по команде
``man <команда>``

### Перемещение по файловой системе
``cd <относительный или абсолютный путь>``

### Просмотра содержимого каталога
``ls``

### Определение объёма каталога
``du -sh``

### Создание / удаление каталогов / файлов
``rm <название файла>`` (с различными флагами) для удаления файлов/каталогов; 

``touch <название файла>`` для создания файла; 

``mkdir <название каталога>`` для создания каталога.

### Задание определённых прав на файл / каталог
``chmod XXX``

### Просмотр истории команд
``history``

## Что такое файловая система? Приведите примеры с краткой характеристикой.
Файловая система – это инструмент, позволяющий операционной системе и программам обращаться к нужным файлам и работать с ними. При этом программы оперируют только названием файла, его размером и датой созданий. Все остальные функции по поиску необходимого файла в хранилище и работе с ним берет на себя файловая система накопителя. 

Пример: FAT32

Современная версия FAT32 вышла в 1995 году. Она может работать с томами размером до 32 ГБ и файлами размером до 4 ГБ. При этом система не работает с накопителями объемом более 8 Тб. Поэтому сегодня FAT32 используется в основном только на флешках, картах памяти фотоаппаратов и музыкальных плееров. 

## Как посмотреть, какие файловые системы подмонтированы в ОС?
``df``

## Как удалить зависший процесс?
``kill <PID процесса>``

# Выполнение лабораторной работы (часть 2)

## Настройка GitHub

Аккаунт GitHub был создан ранее. В данной работе регистрация не рассматривается.

## Установка git-flow 
git-flow был установлен из пакетов, скачанных в интернете, поскольку при попытке сборки из исходников возникли проблемы, связанные с доступностью одного из сабрепозиториев.

## Установка gh
gh -- это утилита командной строки для управления репозиториями на GitHub.

![Установка gh](image/2.1.png){ #fig:019 width=70% }

## Базовая настройка git

Вводим свои данные. Настраиваем в соответствие с заданием.

![Настройка git](image/2.2.png){ #fig:020 width=70% }

## Создание ключей ssh

![Создание ключей ssh](image/2.3.png){ #fig:021 width=70% }

### Указываем ключи ssh на GitHub

Заходим на сайт, в профиле указываем публичный ключ ssh. 

## Создание ключей gpg

Создаем ключи gpg. 

![Создание ключей gpg](image/2.4.png){ #fig:022 width=70% }

### Указываем ключи gpg на GitHub

Аналогично п. 5.1. указываем ключи gpg. 

## Настройка автоматических подписей коммитов git

В соответствии с заданием включаем автоматическую подпись коммитов и указываем там свой ключ. 

![Настройка автоматических подписей коммитов git](image/2.5.png){ #fig:023 width=70% }

## Настройка gh

Логинимся в GitHub с использованием утилиты командной строки gh. 

![Настройка gh](image/2.6.png){ #fig:024 width=70% }

## Создание репозитория курса на основе шаблона

В соответствии с заданием подготавливаем папки и создаем репозиторий курса на основе шаблона.

![Создание репозитория](image/2.7.png){ #fig:025 width=70% }

## Настраиваем каталог курса, создаем необходимые каталоги, отправляем результат на сервер

![Настройка репозитория курса](image/2.8.png){ #fig:026 width=70% }

# Контрольные вопросы (часть 2)
## Что такое системы контроля версий (VCS) и для решения каких задач они предназначаются?
Cистемы контроля версий -- это специализированное программное обеспечение используемое для хранения и контроля за изменениями исходных кодов. Позволяет оптимизировать работу команды, значительно сократить объём занимаемого кодом пространства. 

## Объясните следующие понятия VCS и их отношения:
### Хранилище
Хранилище предназначено для хранения(sic!) исходных кодов и различных ресурсов проекта. В централизованных VCS хранилище находится на главном сервере, а пользователь копирует себе некоторую часть данных из хранилища, так же называемую рабочей копией, после внесения и фиксации изменений пользователь отправляет данные обратно на сервер.
В децентрализованных, таких как git, при стандартной конфигурации каждый пользователь имеет полную копию хранилища и метаданных, при этом централизованное хранилище отсутствует, а такие порталы как GitHub хранят такую же копию хранилища как и все пользователи. 

### Commit
Commit(коммит) это снимок некоторого состояния хранилища в определённый момент времени.

### История
История -- это граф всех находящихся в репозитории снимков (коммитов)

### Рабочая копия
Файлы из репозитория, находящиеся в локальной директории. 

## Что представляют собой и чем отличаются централизованные и децентрализованные VCS

В централизованных VCS полная копия репозитория находится на одном главном сервере, пользователи загружают данные для определённого состояния.
В децентрализованных VCS главный сервер отсутствует, каждый пользователь имеет полную локальную копию хранилища, истории коммитов и т.д.
Самым ярким примером централизованной VCS можно назвать Subversion(SVN), децентрализованной -- git.

## Опишите действия с VCS при единоличной работе с хранилищем.

* Создаём репозиторий ``git init && git add . && git commit -m "initial commit"``
* Производим изменения в коде
* Фиксируем изменения ``git add . && git commit -m "Commit message"``

## Опишите порядок работы с общим хранилищем VCS.
* Клонируем репозиторий из удалённого источника ``git clone <url>``
* Переходим в папку, в которой содержится склонированный репозиторий
* При необходимости создаём новую ветку и переходим в неё ``git branch <name> && git checkout <name>``
* Вносим изменения в код
* Фиксируем изменения ``git add . && git commit -m "Commit message"``
* Отправляем изменения в общее хранилище ``git push``

## Каковы основные задачи, решаемые инструментальным средством git?
Управление локальным репозиторием, создание коммитов, отправка их в общее хранилище.

## Назовите и дайте краткую характеристику командам git.

* ``git init`` инициализирует репозиторий в каталоге
* ``git clone`` позволяет склонировать удалённый репозиторий
* ``git add`` позволяет пометить файлы для добавления в коммит
* ``git commit`` зафиксировать изменения
* ``git pull`` позволяет получить последние изменения из удалённого репозитория
* ``git push`` позволяет отправить локальные изменения в удалённый репозиторий


## Приведите примеры использования при работе с локальным и удалённым репозиториями.
Примеры приведены в ответах на вопросы 4 и 5.


## Что такое и зачем могут быть нужны ветви (branches)?
Ветви нужны для организации комфортной работы в репозитории. Хорошим тоном является вести работу над каждым тикетом в отдельной ветке. Так же, зачастую, производится разделение на стабильную ветвь(master/main) в которой находится стабильный, работоспособный код, готовый для распространения/установки у клиентов, ветвь текущей разработки (develop/future), в которую сливаются изменения из других ветвей при внедрении нового функционала/фиксе багов.

## Как и зачем можно игнорировать некоторые файлы при commit?

Игнорируемые файлы в git перечисляются в файле ``.gitignore``. Это необходимо для того, что бы в репозиторий не попадали user-specific файлы, такие как файлы настроек локального окружения, бинарные файлы создаваемые при сборке и т.п.


# Выводы

По итогу выполненной лабораторной работы я научился устанавливать операционную систему, с использованием виртуальной машины. Так-же я ознакомился с работой в markdown.

Приобрел практические навыки установки операционной системы на виртуальную машин и настройки минимально необходимых для дальнейшей работы сервисов.

Изучил идеологию и применение средств контроля версий.

Освоил умения по работе с git.

Научился оформлять отчёты с помощью легковесного языка разметки Markdown.

# Список литературы{.unnumbered}

1. Rocky Linux // Rocky Linux Offlcial site URL: https://rockylinux.org/ru/ (дата обращения: 08.09.2022).
2. Microsoft // GitHub URL: https://github.com/ (дата обращения: 08.09.2022).
3. wereturtle // ghostwriter Offlcial site URL: https://wereturtle.github.io/ghostwriter/ (дата обращения: 08.09.2022).
4. Software Freedom Conservancy, Inc. // git - Book URL: https://git-scm.com/book/en/v2/ (дата обращения: 08.09.2022).
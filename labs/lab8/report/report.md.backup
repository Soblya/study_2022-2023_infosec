---
## Front matter
title: "Отчёт по лабораторной работе 8"
subtitle: ""
author: "Соболев Максим Сергеевич"

## Generic otions
lang: ru-RU
toc-title: "Содержание"

## Bibliography
bibliography: bib/cite.bib
csl: pandoc/csl/gost-r-7-0-5-2008-numeric.csl

## Pdf output format
toc: true # Table of contents
toc-depth: 2
lof: true # List of figures
lot: false # List of tables
fontsize: 12pt
linestretch: 1.5
papersize: a4
documentclass: scrreprt
## I18n polyglossia
polyglossia-lang:
  name: russian
  options:
	- spelling=modern
	- babelshorthands=true
polyglossia-otherlangs:
  name: english
## I18n babel
babel-lang: russian
babel-otherlangs: english
## Fonts
mainfont: PT Serif
romanfont: PT Serif
sansfont: PT Sans
monofont: PT Mono
mainfontoptions: Ligatures=TeX
romanfontoptions: Ligatures=TeX
sansfontoptions: Ligatures=TeX,Scale=MatchLowercase
monofontoptions: Scale=MatchLowercase
## Biblatex
biblatex: true
biblio-style: "gost-numeric"
biblatexoptions:
  - parentracker=true
  - backend=biber
  - hyperref=auto
  - language=auto
  - autolang=other*
  - citestyle=gost-numeric
## Pandoc-crossref LaTeX customization
figureTitle: "Рис."
tableTitle: "Таблица"
listingTitle: "Листинг"
lofTitle: "Список иллюстраций"
lotTitle: "Список таблиц"
lolTitle: "Листинги"
## Misc options
indent: true
header-includes:
  - \usepackage{indentfirst}
  - \usepackage{float} # keep figures where there are in the text
  - \usepackage{pdflscape}
  - \floatplacement{figure}{H} # keep figures where there are in the text
---

***
# Элементы криптографии. Шифрование различных исходных текстов одним ключом

# Цель работы

Освоить на практике применение режима однократного гаммирования на примере кодирования различных исходных текстов одним ключом.

# Задание

Два текста кодируются одним ключом (однократное гаммирование).
Требуется не зная ключа и не стремясь его определить, прочитать оба текста. Необходимо разработать приложение, позволяющее шифровать и дешифровать тексты P1 и P2 в режиме однократного гаммирования. Приложение должно определить вид шифротекстов C1 и C2 обоих текстов P1 и P2 при известном ключе; Необходимо определить и выразить аналитически способ, при котором злоумышленник может прочитать оба текста, не зная ключа и не стремясь его определить.

# Теоретическое введение

Гаммирование – это наложение на открытые данные криптографической гаммы, то есть
последовательности элементов данных, вырабатываемых с помощью некоторого криптографического алгоритма, для получения зашифрованных данных. 

***
# Выполнение лабораторной работы

## Шаг 1

```csharp
using System.Text;

Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
Console.OutputEncoding = Encoding.GetEncoding(1251);
Console.InputEncoding = Encoding.GetEncoding(1251);

Console.WriteLine(
    $"В каком формате будет представлен шифротекст? Нажмите 1 если в шеснадцатеричном, нажмите 2 если открытым текстом");
var cypherText1Form = Console.ReadLine();

Console.WriteLine($"Введите шифротекст");
var cypherText1 = ReadUserInput(cypherText1Form);

Console.WriteLine(
    $"В каком формате будет представлен шифротекст? Нажмите 1 если в шеснадцатеричном, нажмите 2 если открытым текстом");
var cypherText2Form = Console.ReadLine();

Console.WriteLine($"Введите шифротекст");
var cypherText2 = ReadUserInput(cypherText2Form);

Console.WriteLine(
    $"В каком формате будет представлено сообщение? Нажмите 1 если в шеснадцатеричном, нажмите 2 если открытым текстом");
var textForm = Console.ReadLine();

Console.WriteLine($"Введите  сообщение");
var plainText = ReadUserInput(textForm);

var opentext = DeriveOpentext(cypherText1, cypherText2, plainText); 
Console.WriteLine(opentext);
Console.WriteLine(Encoding.GetEncoding(1251).GetString(Enumerable.Range(0, opentext.Length)
    .Where(x => x % 2 == 0)
    .Select(x => Convert.ToByte(opentext.Substring(x, 2), 16))
    .ToArray()));

string DeriveOpentext(string cypherText1, string cypherText2, string plainText)
{
    var result = string.Empty;
    for (var i = 0; i < cypherText1.Length; i += 2)
    {
        var cypherText1Byte = Convert.ToInt32(cypherText1.Substring(i, 2), 16);
        var cypherText2Byte = Convert.ToInt32(cypherText2.Substring(i, 2), 16);
        var plainTextByte = Convert.ToInt32(plainText.Substring(i, 2), 16);

        result += (cypherText1Byte ^ cypherText2Byte ^ plainTextByte).ToString("X2");
    }
        
    return result;
}

string ReadUserInput(string? s)
{
    return s == "1"
        ? Console.ReadLine() ?? throw new InvalidOperationException()
        : string.Concat(Encoding.GetEncoding(1251)
            .GetBytes(Console.ReadLine() ?? throw new InvalidOperationException()).Select(b => b.ToString("X2")));
}
```

## Шаг 2

Результат

![1](image/1.png){ #fig:001 width=70% }


# Выводы

В итоге мы освоили на практике применение режима однократного гаммирования на примере кодирования различных исходных текстов одним ключом.

# Список литературы{.unnumbered}

1. xattr(7) — Linux manual page // Linux man-pages project URL: https://man7.org/linux/man-pages/man7/xattr.7.html (дата обращения: 30.09.2022). 
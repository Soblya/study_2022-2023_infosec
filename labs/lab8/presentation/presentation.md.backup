---
## Front matter
lang: ru-RU
title: Элементы криптографии. Шифрование различных исходных текстов одним ключом
subtitle:
author:
  - Соболев М. С.
institute:
  - Российский университет дружбы народов, Москва, Россия
date: 15 октября 2022

## i18n babel
babel-lang: russian
babel-otherlangs: english

## Formatting pdf
toc: false
toc-title: Содержание
slide_level: 2
aspectratio: 169
section-titles: true
theme: metropolis
header-includes:
 - \metroset{progressbar=frametitle,sectionpage=progressbar,numbering=fraction}
 - '\makeatletter'
 - '\beamer@ignorenonframefalse'
 - '\makeatother'

## Fonts
mainfont: PT Serif
romanfont: PT Serif
sansfont: PT Sans
monofont: PT Mono
mainfontoptions: Ligatures=TeX
romanfontoptions: Ligatures=TeX
sansfontoptions: Ligatures=TeX,Scale=MatchLowercase
monofontoptions: Scale=MatchLowercase

---

# Информация

## Докладчик

:::::::::::::: {.columns align=center}
::: {.column width="70%"}

  * Соболев Максим Сергеевич
  * Студент 4 курса, 1032192035
  * Направление: Бизнес-информатика
  * Российский университет дружбы народов
  * [sobolek322lorek@gmail.com](sobolek322lorek@gmail.com)

:::
::: {.column width="30%"}

:::
::::::::::::::

# Вводная часть

## Актуальность

- Актуально

## Объект и предмет исследования

- Элементы криптографии. 
- Шифрование различных исходных текстов одним ключом.
- 
## Цель

- Освоить на практике применение режима однократного гаммирования на примере кодирования различных исходных текстов одним ключом.

## Материал

- Отчет по ранее выполненной работе

# Выполнение лабораторной работы


##  1

Код

```csharp
using System.Text;

Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
Console.OutputEncoding = Encoding.GetEncoding(1251);
Console.InputEncoding = Encoding.GetEncoding(1251);

Console.WriteLine(
    $"В каком формате будет представлен шифротекст? Нажмите 1 если в шеснадцатеричном, нажмите 2 если открытым текстом");
var cypherText1Form = Console.ReadLine();

Console.WriteLine($"Введите шифротекст");
var cypherText1 = ReadUserInput(cypherText1Form);

Console.WriteLine(
    $"В каком формате будет представлен шифротекст? Нажмите 1 если в шеснадцатеричном, нажмите 2 если открытым текстом");
var cypherText2Form = Console.ReadLine();

Console.WriteLine($"Введите шифротекст");
var cypherText2 = ReadUserInput(cypherText2Form);

Console.WriteLine(
    $"В каком формате будет представлено сообщение? Нажмите 1 если в шеснадцатеричном, нажмите 2 если открытым текстом");
var textForm = Console.ReadLine();

Console.WriteLine($"Введите  сообщение");
var plainText = ReadUserInput(textForm);

var opentext = DeriveOpentext(cypherText1, cypherText2, plainText); 
Console.WriteLine(opentext);
Console.WriteLine(Encoding.GetEncoding(1251).GetString(Enumerable.Range(0, opentext.Length)
    .Where(x => x % 2 == 0)
    .Select(x => Convert.ToByte(opentext.Substring(x, 2), 16))
    .ToArray()));

string DeriveOpentext(string cypherText1, string cypherText2, string plainText)
{
    var result = string.Empty;
    for (var i = 0; i < cypherText1.Length; i += 2)
    {
        var cypherText1Byte = Convert.ToInt32(cypherText1.Substring(i, 2), 16);
        var cypherText2Byte = Convert.ToInt32(cypherText2.Substring(i, 2), 16);
        var plainTextByte = Convert.ToInt32(plainText.Substring(i, 2), 16);

        result += (cypherText1Byte ^ cypherText2Byte ^ plainTextByte).ToString("X2");
    }
        
    return result;
}

string ReadUserInput(string? s)
{
    return s == "1"
        ? Console.ReadLine() ?? throw new InvalidOperationException()
        : string.Concat(Encoding.GetEncoding(1251)
            .GetBytes(Console.ReadLine() ?? throw new InvalidOperationException()).Select(b => b.ToString("X2")));
}

```

##  2

Результат

![1](image/1.png){ #fig:001 width=70% }

# Выводы

В итоге мы освоили на практике применение режима однократного гаммирования
на примере кодирования различных исходных текстов одним ключом.


:::
